#!/usr/bin/env python

import sys
sys.dont_write_bytecode = True

import os
import json
import getopt
from subprocess import Popen, PIPE

verbose = False
domain = 'my.1password.com'
quiet = False

def main():
  global verbose
  global domain
  global quiet
  params = {}
  
  # currently doens't work unless there is an existing token
  # the prompt for signing into op somehow breaks with error:
  # [LOG] 2019/01/22 06:46:56 (ERROR) inappropriate ioctl for device
  # to work around, creating an option to exit if existing token not found
  requireEnvToken = False
  
  # first argument from git: 'get', 'store', or 'erase'
  # possible arguments
  # - options
  # - domain
  try:
    opts, args = getopt.getopt(sys.argv[1:], 'd:hqtv', ['domain=', 'help', 'quiet', 'token', 'verbose'])
  except getopt.GetoptError as e:
    usage(e)
    exitOnError('', False, 2)
    
  # check opts
  for k, v in opts:
    if k in ['-d', '--domain']:
      domain = v
    elif k in ['-h', '--help']:
      usage()
      sys.exit()
    elif k in ['-q', '--quiet']:
      quiet = True
    elif k in ['-t', '--token']:
      requireEnvToken = True
    elif k in ['-v', '--verbose']:
      verbose = True
    else:
      # should be caught above by except handler
      assert False, "unhandled option"
      
  # check args
  if len(args) == 1:
    if verbose:
      sys.stderr.write('args: ' + ' '.join(args) + '\n')
    if args[0] <> 'get':
      # we only handle gets, exit on any other arg value
      if verbose:
        sys.stderr.write('Launched with arg: ' + args[0] + '. This utility only supports get requests.\n')
      sys.exit(0)
  elif len(args) > 1:
  	usage('Usage error: too many args included (count:' + str(len(args)) + ')')
  	exitOnError('', False, 2)
  else:
    usage('Usage error: missing arg (count:' + str(len(args)) + ')')
    exitOnError('', False, 2)
    
  if not quiet:
    print('Enter host in \'host=value\' format followed by a blank line:')
  
  # read input from stdin coming from git credentials
  while True:
    line = sys.stdin.readline()
    if line == '\n' or line == '':
      break
    else:
      line = line.rstrip()
      if verbose:
        sys.stderr.write('Input line: ' + line + '\n')
      parts = line.split('=')
      if len(parts) == 2:
        params[parts[0]] = parts[1]
  
  
  # check if we have a host param
  if 'host' not in params:
    exitOnError('Invalid input: missing host value\n', False, 1)
  host = params['host']


  # check to see if we have a token in the env
  token = ''
  keys = os.environ.keys()
  for key in keys:
    if key.startswith('OP_SESSION_'):
      token = os.environ[key]
      if verbose:
        sys.stderr.write('Found token in env\n')
    
  
  # if no token found: authenticate and get token
  if token == '':
    if verbose:
      sys.stderr.write('No token found\n')
    if requireEnvToken:
      exitOnError('No token found but required. You can get a new token for with the command:\n    eval $(op signin ' + domain + ')\n', True, 2)
    else:
      (token, err) = opSignin()
      if err:
        exitOnError(err, True, 1)
    
  # try to get item, with knowledge it might fail if token expired
  (item, err) = opGetItem(host, token) 
  if err:
    if err.endswith('(ERROR) You are not currently signed in. Please run `op signin --help` for instructions\n'):
      # we had an invalid token
      item = None
      msg = 'Expired token found but required. You can get a new token for with the command:\n    eval $(op signin ' + domain + ')'
      if requireEnvToken:
        exitOnError(msg, True, 1)
      elif not quiet:
        print(msg)
      (token, err) = opSignin()
      if err:
        exitOnError(err, True, 1)
    else:
      exitOnError(err, True, 1)
  
  # if item is defined, parse it
  # else we had invalid token, but should have a valid one now, get item
  if item is not None:
    if verbose:
      sys.stderr.write('item is not None\n')
      sys.stderr.write('item: ' + item + '\n')
    parseOpItem(item)
  else:
    (item, err) = opGetItem(host, token)
    if err:
      exitOnError(err, True, 1)
    parseOpItem(item)
    
  return 0
# end main()


# reusable function for calling CLI executable using /usr/bin/env for path
#   returns stdout and stderr
def doShellCmd(args):
  global verbose
  if verbose:
    sys.stderr.write('Running cmd: /usr/bin/env' + ' '.join(args) + '\n')
  (output, err) = (Popen(['/usr/bin/env'] + args, stdout=PIPE, stderr=PIPE)).communicate()
  return (output, err)


# moved out of main to handle invalid tokens
def opSignin():
  (token, err) = doShellCmd(['op', 'signin', domain, '--output=raw'])
  token = token.rstrip()
  return (token, err)


# moved out of main to handle invalid token
def opGetItem(host, token):
  (item, err) = doShellCmd(['op', 'get', 'item', host, '--session=' + token])
  item = item.rstrip()
  return (item, err)


# parse 1password item
def parseOpItem(item):
  global verbose
  try:
      data = json.loads(item)
  except:
    exitOnError('Error parsing json: \n', False, 1)
  
  details = data.get('details', None)
  if not details:
    exitOnError('Error parsing json: details\n', False, 1)

  
  fields = details.get('fields', None)
  if fields is None:
    exitOnError('Error parsing json: fields\n', False, 1)

  
  for record in fields:
    if "designation" not in record:
      continue
    if record["designation"] == 'username':
      username = record["value"]
    if record["designation"] == 'password':
      password = record["value"]
  
  if 'username' in locals() and 'password' in locals():
    sys.stdout.write('username='+username+'\npassword='+password+'\n' )
    sys.stdout.flush()
  else:
    exitOnError('Error: no username and password found in json\n', False, 1)
# end parseOpItem
      
# print usage and any messages re invalid usage
def usage(msg=None):
  if msg:
    print('\033[91m' + '{}'.format(msg) + '\033[0m\n')
    
  print('''usage: {} [-dhv | --domain=my.1password.com 
                 --help | --verbose ] get

  Utility to automate logging into git using 1Password command line utility.
  Git passes in parameters on stdin, and this utility returns a username and 
  password on stdout if found. See Ref [1] for full details.
  
  Before attempting to sign into 1Password, will check for existing token in 
  the current environment variables and will attempt to use it.
  
  To configure git to use this helper, run the following command:
  
    git config --global credential.helper '1password -q --domain=<domain>'
  
  where domain is the correct domain for your 1Password account.
  
  
  Options
    -d, --domain   the domain (or subdomain) to sign into. Defaults to 'my'
    -h, --help     prints this message
    -q, --quiet    suppresses prompts for input on stdin. Should be used when
                   configured as git credential.helper
    -t, --token    require a 1Password session token in the env variables. 
                   Currently this is required to work when configured as a 
                   git credentials helper.
    -v, --verbose  prints out verbose (debug) messages
    note: -v should only be used while testing as stand-alone script
    
    returns  0  if item exists
  
  
  References:
    [1] https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
    [2] https://support.1password.com/command-line-getting-started/
'''.format(os.path.basename(sys.argv[0])))
  return -2

  
# send parent process message to quit due to error
def exitOnError(msg, force, status):
  global quiet
  global verbose
  # only send quit if called from git, ie in quiet mode
  if quiet:
    sys.stdout.write('quit=1\n')
    sys.stdout.flush()
  if verbose or force:
    sys.stderr.write(msg)
  sys.exit(status)


if __name__ == '__main__':
  sys.exit(main())

